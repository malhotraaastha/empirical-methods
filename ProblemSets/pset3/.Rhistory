# To create a dataframe containing only the matched observations, use the match.data() function:
dta_m <- match.data(mod_match)
dim(dta_m)
with(dta_m, t.test(re78 ~ treat))
# or use OLS with or without controls
lm_treat1 <- lm(re78 ~ treat, data = dta_m)
summary(lm_treat1)
lm_treat2 <- lm(re78 ~ age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married + treat, data = dta_m)
summary(lm_treat2)
library(cem)
library(cem)
data <- data.frame(na.omit(data_dw_psid))
imbalance(group=data$treat, data=data[covars_psid])
library(cem)
data <- data.frame(na.omit(data_dw_psid))
imbalance(group=data$treat, data=data[covars_psid]) # common support is 1.4%
mat <- cem(treatment = "treat", data = data, drop = "re78",keep.all=TRUE)
mat
est <- att(mat, re78 ~ treat, data = data)
est
library(cem)
data <- data.frame(na.omit(data_dw_psid))
imbalance(group=data$treat, data=data[covars_psid]) # common support is 1.4%
mat <- cem(treatment = "treat", data = data, drop = "re78",keep.all=TRUE)
mat
est <- att(mat, re78 ~ treat + education, data = data)
est
library(cem)
data <- data.frame(na.omit(data_dw_psid))
imbalance(group=data$treat, data=data[covars_psid]) # common support is 1.4%
mat <- cem(treatment = "treat", data = data, drop = "re78",keep.all=TRUE)
mat
est <- att(mat, re78 ~ treat + age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married, data = data)
est
est
est <- att(mat, re78 ~ treat + age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married, data = data)
est
library(cem)
data <- data.frame(na.omit(data_dw_psid))
imbalance(group=data$treat, data=data[covars_psid]) # common support is 1.4%
mat <- cem(treatment = "treat", data = data, drop = "re78",keep.all=TRUE)
mat
est <- att(mat, re78 ~ treat + age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married, data = data)
est
mat
est <- att(mat, re78 ~ treat + age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married, data = data)
est
est
mat
est <- att(mat, re78 ~ treat + age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married, data = data)
est
library(cem)
data <- data.frame(na.omit(data_dw_psid))
imbalance(group=data$treat, data=data[covars_psid]) # common support is 1.4%
mat <- cem(treatment = "treat", data = data, drop = "re78",keep.all=TRUE)
mat
#est <- att(mat, re78 ~ treat + age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married, data = data)
#est
est <- att(mat, re78 ~ treat + age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married, data = data)
est
est <- att(mat, re78 ~ treat , data = data)
est
est2 <- att(mat, re78 ~ treat + age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married, data = data, formula = logit)
est2 <- att(mat, re78 ~ treat + age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married, data = data, formula = "logit")
est <- att(mat, re78 ~ treat + age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married, data = data)
est
est2 <- att(mat, re78 ~ treat + age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married, data = data, formula = "forest")
est2 <- att(mat, re78 ~ treat , data = data, formula = "forest")
mat <- cem(treatment = "treat", data = data, drop = "re78",keep.all=TRUE)
mat
est2 <- att(mat, re78 ~ treat , data = data, formula = "forest")
est2 <- att(mat, re78 ~ treat , data = data, model = "forest")
est2
est2 <- att(mat, re78 ~ treat + age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married, data = data, model = "forest")
est2
I(re75^2) + married, data = data, model = "forest", extra = TRUE)
plot(est2, mat, data, vars=c("education", "age", "re74", "re75"))
plot(est2, mat, data, vars=c("education", "age", "re74", "re75", "black", "hispanic", "nodegree", "married"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(ks)
library(kdensity)
library(data.table)
library(fitdistrplus)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(dvmisc)
library(polywog)
library(splines)
library(freeknotsplines)
library(foreign)
library(MatchIt)
library(dplyr)
library(cem)
setwd("~/github/empirical-methods/ProblemSets/pset3")
data <- load(Yelp.Rdata)
data <- load(yelp.Rdata)
data <- load("yelp.Rdata")
View(yelp)
View(yelp)
View(yelp)
View(yelp)
data_1 <- data %>% subset(score<0.75) %>% mutate(treat = ifelse(stars == 0.5 , 1, 0))
data <- load("yelp.Rdata")
rev <- data$logrev
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(ks)
library(kdensity)
library(data.table)
library(fitdistrplus)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(dvmisc)
library(polywog)
library(splines)
library(freeknotsplines)
library(foreign)
library(MatchIt)
library(dplyr)
library(cem)
setwd("~/github/empirical-methods/ProblemSets/pset3")
data <- load("yelp.Rdata")
#rev <- data$logrev
View(yelp)
View(yelp)
View(yelp)
data <- load("yelp.Rdata")
data <- data.frame(data)
#rev <- data$logrev
data <- load("yelp.Rdata")
data <- data.frame[data,]
data <- load("yelp.Rdata")
data <- data.frame(data[])
#rev <- data$logrev
View(data)
View(data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(ks)
library(kdensity)
library(data.table)
library(fitdistrplus)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(dvmisc)
library(polywog)
library(splines)
library(freeknotsplines)
library(foreign)
library(MatchIt)
library(dplyr)
library(cem)
setwd("~/github/empirical-methods/ProblemSets/pset3")
data <- load("yelp.Rdata")
data_1 <- yelp %>% subset(score<0.75) %>% mutate(treat = ifelse(stars == 0.5 , 1, 0))
data_1 <- yelp %>% subset(score<0.75) %>% mutate(treat = ifelse(stars == 0.5 , 1, 0))
data_2 <- yelp %>% subset(score>=0.25 & score<1.25) %>% mutate(treat = ifelse(stars == 1 , 1, 0))
data_3 <- yelp %>% subset(score>=0.75 & score<1.75) %>% mutate(treat = ifelse(stars == 1.5 , 1, 0))
data_4  <- yelp %>% subset(score>=1.25 & score<2.25) %>% mutate(treat = ifelse(stars == 2 , 1, 0))
data_5  <- yelp %>% subset(score>=1.75 & score<2.75) %>% mutate(treat = ifelse(stars == 2.5 , 1, 0))
data_6  <- yelp %>% subset(score>=2.25 & score<3.25) %>% mutate(treat = ifelse(stars == 3 , 1, 0))
data_7  <- yelp %>% subset(score>=2.75 & score<3.75) %>% mutate(treat = ifelse(stars == 3.5 , 1, 0))
data_8  <- yelp %>% subset(score>=3.25 & score<4.25) %>% mutate(treat = ifelse(stars == 4 , 1, 0))
data_9  <- yelp %>% subset(score>=3.75 & score<4.75) %>% mutate(treat = ifelse(stars == 4.5 , 1, 0))
data_10 <- yelp %>% subset(score>=4.25) %>% mutate(treat = ifelse(stars == 5 , 1, 0))
rd_eff <- data.frame(matrix(NA, nrow = 10, ncol = 1))
for (i in 1:10){
reg <- lm(logrev ~ treat + score, data = get(paste0("data_" , i)))
rd_eff[i,1] <- summary(reg)$coefficients[2,1]
}
View(reg)
View(reg)
View(rd_eff)
summary(reg)$coefficients
print(rd_eff)
print(rd_eff, title= 'treatment effect')
print(rd_eff, title =  'treatment effect')
rd_eff
colnames(rd_eff) <- 'treatment effect'
colnames(rd_eff) <- 'treatment effect'
print(rd_eff)
colnames(rd_eff) <- 'treatment effect for 10 discontinuities'
print(rd_eff)
avg_eff <- mean(rd_eff)
avg_eff <- mean(rd_eff)
avg_eff
avg_eff <- mean(rd_eff$`treatment effect for 10 discontinuities`)
avg_eff
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(ks)
library(kdensity)
library(data.table)
library(fitdistrplus)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(dvmisc)
library(polywog)
library(splines)
library(freeknotsplines)
library(foreign)
library(MatchIt)
library(dplyr)
library(cem)
setwd("~/github/empirical-methods/ProblemSets/pset3")
data_dw <- read.dta("nsw_dw.dta")
age <- data_dw$age
treat <- data_dw$treat
black <- data_dw$black
hispanic <- data_dw$hispanic
education <- data_dw$education
married <- data_dw$married
nodegree <- data_dw$nodegree
re74 <- data_dw$re74
re78 <- data_dw$re78
re75 <- data_dw$re75
mean(age[treat == 1])
mean(age[treat == 0])
tapply(age, treat, mean)
tapply(black, treat, mean)
tapply(married, treat, mean)
tapply(hispanic, treat, mean)
tapply(education, treat, mean)
tapply(nodegree, treat, mean)
tapply(re74, treat, mean)
tapply(re78, treat, mean)
tapply(re75, treat, mean)
covars <- cbind(age, black, hispanic, married, education, nodegree, re74, re75, re78)
lapply(data_dw[,c("married", "age", "black", "nodegree", "hispanic", "education", "re74", "re75", "re78")], function(x) t.test(x ~ data_dw$treat, var.equal = TRUE))
age <- data_dw$age
treat <- data_dw$treat
black <- data_dw$black
hispanic <- data_dw$hispanic
education <- data_dw$education
married <- data_dw$married
nodegree <- data_dw$nodegree
re74 <- data_dw$re74
re78 <- data_dw$re78
re75 <- data_dw$re75
#mean(age[treat == 1])
#mean(age[treat == 0])
# calculating means by treatment status (control == 0, treatment == 1)
tapply(age, treat, mean)
tapply(black, treat, mean)
tapply(married, treat, mean)
tapply(hispanic, treat, mean)
tapply(education, treat, mean)
tapply(nodegree, treat, mean)
tapply(re74, treat, mean)
tapply(re78, treat, mean)
tapply(re75, treat, mean)
covars <- cbind(age, black, hispanic, married, education, nodegree, re74, re75, re78)
lapply(data_dw[,c("married", "age", "black", "nodegree", "hispanic", "education", "re74", "re75", "re78")], function(x) t.test(x ~ data_dw$treat, var.equal = TRUE))
age <- data_dw$age
treat <- data_dw$treat
black <- data_dw$black
hispanic <- data_dw$hispanic
education <- data_dw$education
married <- data_dw$married
nodegree <- data_dw$nodegree
re74 <- data_dw$re74
re78 <- data_dw$re78
re75 <- data_dw$re75
#mean(age[treat == 1])
#mean(age[treat == 0])
# calculating means by treatment status (control == 0, treatment == 1)
tapply(age, treat, mean)
tapply(black, treat, mean)
tapply(married, treat, mean)
tapply(hispanic, treat, mean)
tapply(education, treat, mean)
tapply(nodegree, treat, mean)
tapply(re74, treat, mean)
#tapply(re78, treat, mean)
tapply(re75, treat, mean)
covars <- cbind(age, black, hispanic, married, education, nodegree, re74, re75, re78)
lapply(data_dw[,c("married", "age", "black", "nodegree", "hispanic", "education", "re74", "re75", "re78")], function(x) t.test(x ~ data_dw$treat, var.equal = TRUE))
age <- data_dw$age
treat <- data_dw$treat
black <- data_dw$black
hispanic <- data_dw$hispanic
education <- data_dw$education
married <- data_dw$married
nodegree <- data_dw$nodegree
re74 <- data_dw$re74
re78 <- data_dw$re78
re75 <- data_dw$re75
#mean(age[treat == 1])
#mean(age[treat == 0])
# calculating means by treatment status (control == 0, treatment == 1)
tapply(age, treat, mean)
tapply(black, treat, mean)
tapply(married, treat, mean)
tapply(hispanic, treat, mean)
tapply(education, treat, mean)
tapply(nodegree, treat, mean)
tapply(re74, treat, mean)
#tapply(re78, treat, mean)
tapply(re75, treat, mean)
covars <- cbind(age, black, hispanic, married, education, nodegree, re74, re75, re78)
lapply(data_dw[,c("married", "age", "black", "nodegree", "hispanic", "education", "re74", "re75")], function(x) t.test(x ~ data_dw$treat, var.equal = TRUE))
treatEff_b <- mean(re78[treat == 1]) - mean(re78[treat == 0])
treatEff_b
reg1 <- lm (re78 ~ age + education + black + hispanic + married + nodegree + treat
+ re74 + re75)
reg1
treatEff_b <- mean(re78[treat == 1]) - mean(re78[treat == 0])
treatEff_b
reg1 <- lm (re78 ~ age + education + black + hispanic + married + nodegree + treat
+ re74 + re75)
summary(reg1)
treatEff_b <- mean(re78[treat == 1]) - mean(re78[treat == 0])
treatEff_b
reg1 <- lm (re78 ~ age + education + black + hispanic + married + nodegree + treat
+ re74 + re75)
summary(reg1, digits = 3)
reg1$coefficients
summary(reg1)
View(reg1)
View(reg1)
sum(reg1, model.info = FALSE, digits = 3)
summ(reg1, model.info = FALSE, digits = 3)
reg1 <- lm (re78 ~ age + education + black + hispanic + married + nodegree + treat
+ re74 + re75)
summ(reg1, model.info = FALSE, digits = 3)
install.packages('jtools')
library(jtools)
summ(reg1, model.info = FALSE, digits = 3)
treatEff_b
reg 2 <- lm (re78 ~ age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married)
reg2 <- lm (re78 ~ age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married)
summ(reg 2, model.info = FALSE, digits = 3)
summ(reg2, model.info = FALSE, digits = 3)
reg2 <- lm (re78 ~ age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married + treat)
summ(reg2, model.info = FALSE, digits = 3)
covars_psid <- c('age', 'married', 'education', 'black', 'hispanic', 'nodegree', 're74', 're75')
data_dw_psid %>%
group_by(treat) %>%
dplyr::select(one_of(covars_psid)) %>%
summarise_all(funs(mean(., na.rm = T)))
# dropping NSW control group
Ndata_dw <- data_dw[which(treat == '1'),]
psid_cont <- read.dta("psid_controls.dta")
dim(Ndata_dw)
dim(psid_cont)
# appending the data with PSID controls
data_dw_psid <- rbind(Ndata_dw, psid_cont)
dim(data_dw_psid)
age <- data_dw_psid$age
treat <- data_dw_psid$treat
black <- data_dw_psid$black
hispanic <- data_dw_psid$hispanic
education <- data_dw_psid$education
married <- data_dw_psid$married
nodegree <- data_dw_psid$nodegree
re74 <- data_dw_psid$re74
re78 <- data_dw_psid$re78
re75 <- data_dw_psid$re75
# Testing for balance between treatment and control
covars_psid <- c('age', 'married', 'education', 'black', 'hispanic', 'nodegree', 're74', 're75')
data_dw_psid %>%
group_by(treat) %>%
dplyr::select(one_of(covars_psid)) %>%
summarise_all(funs(mean(., na.rm = T)))
# testing for difference in means
lapply(covars_psid, function(v) {
t.test(data_dw_psid[, v] ~ data_dw_psid[, 'treat'])
}) # maybe previous method was nice
lapply(data_dw_psid[,c("married", "age", "black", "nodegree", "hispanic", "education", "re74", "re75")], function(x) t.test(x ~ data_dw_psid$treat, var.equal = TRUE))
lapply(data_dw_psid[,c("married", "age", "black", "nodegree", "hispanic", "education", "re74", "re75")], function(x) t.test(x ~ data_dw_psid$treat, var.equal = TRUE, model.info = FALSE))
install.packages('rstatix')
library(rstatix)
library(rstatix)
install.packages('rstatix')
install.packages(rstatix)
install.packages('rstatix')
library(rstatix)
install.packages('rstatix')
yes
install.packages('rstatix')
library(rstatix)
knitr::opts_chunk$set(echo = TRUE)
# estimate the propensity score by running a logit model
m_ps <- glm(treat ~ age + education + nodegree + black + hispanic + re74 + re75 + married , family = binomial(), data = data_dw_psid)
summary(m_ps)
# Using this model, we can now calculate the propensity score for observation. It is simply the sample's predicted probability of being Treated, given the estimates from the logit model. Below, I calculate this propensity score using predict() and create a dataframe that has the propensity score as well as the actual treatment status.
prs_df <- data.frame(pr_score = predict(m_ps, type = "response"),
treat = m_ps$model$treat)
head(prs_df)
labs <- paste("Treatment Status:", c("Treated", "Control"))
prs_df %>%
mutate(treat = ifelse(treat == 1, labs[1], labs[2])) %>%
ggplot(aes(x = pr_score)) +
geom_histogram(color = "white") +
facet_wrap(~treat) +
xlab("Probability of getting treated") + xlim(0,1) + ylim(0,80) +
theme_bw()
library(tidyverse)
library(readr)
library(ks)
library(kdensity)
library(data.table)
library(fitdistrplus)
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(dvmisc)
library(polywog)
library(splines)
library(freeknotsplines)
library(foreign)
library(MatchIt)
library(dplyr)
library(cem)
library(jtools)
labs <- paste("Treatment Status:", c("Treated", "Control"))
prs_df %>%
mutate(treat = ifelse(treat == 1, labs[1], labs[2])) %>%
ggplot(aes(x = pr_score)) +
geom_histogram(color = "white") +
facet_wrap(~treat) +
xlab("Probability of getting treated") + xlim(0,1) + ylim(0,80) +
theme_bw()
m_ps3 <- glm(treat ~ age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married , family = binomial(), data = data_dw_psid)
summary(m_ps3)
prs_df3 <- data.frame(pr_score3 = predict(m_ps3, type = "response"),
treat = m_ps3$model$treat)
head(prs_df3)
labs <- paste("Treatment Status:", c("Treated", "Control"))
prs_df3 %>%
mutate(treat = ifelse(treat == 1, labs[1], labs[2])) %>%
ggplot(aes(x = pr_score3)) +
geom_histogram(color = "white") +
facet_wrap(~treat) +
xlab("Probability of getting treated") + xlim(0,1) + ylim(0,80) +
theme_bw()
data_dw_psid_nomiss <- data_dw_psid %>%  # MatchIt does not allow missing values
dplyr::
data_dw_psid_nomiss <- data_dw_psid %>%  # MatchIt does not allow missing values
dplyr::select(re78, treat, one_of(covars_psid)) %>%
na.omit()
mod_match <- matchit(treat ~ age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married,
method = "nearest", data = data_dw_psid_nomiss)
summary(mod_match)
plot(mod_match)
# To create a dataframe containing only the matched observations, use the match.data() function:
dta_m <- match.data(mod_match)
dim(dta_m)
with(dta_m, t.test(re78 ~ treat))
# or use OLS with or without controls
lm_treat1 <- lm(re78 ~ treat, data = dta_m)
summary(lm_treat1)
lm_treat2 <- lm(re78 ~ age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married + treat, data = dta_m)
summary(lm_treat2)
summ(lm_treat1, digits = 2)
with(dta_m, t.test(re78 ~ treat))
# or use OLS with or without controls
lm_treat1 <- lm(re78 ~ treat, data = dta_m)
summ(lm_treat1, digits = 2)
lm_treat2 <- lm(re78 ~ age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married + treat, data = dta_m)
summ(lm_treat2, digits = 2)
with(dta_m, t.test(re78 ~ treat))
# or use OLS with or without controls
lm_treat1 <- lm(re78 ~ treat, data = dta_m)
summ(lm_treat1, digits = 2)
lm_treat2 <- lm(re78 ~ age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married + treat, data = dta_m)
summ(lm_treat2, digits = 2, model.info = FALSE)
with(dta_m, t.test(re78 ~ treat))
# or use OLS with or without controls
lm_treat1 <- lm(re78 ~ treat, data = dta_m)
summ(lm_treat1, digits = 2, model.info = FALSE)
lm_treat2 <- lm(re78 ~ age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married + treat, data = dta_m)
summ(lm_treat2, digits = 2, model.info = FALSE)
library(cem)
data <- data.frame(na.omit(data_dw_psid))
imbalance(group=data$treat, data=data[covars_psid]) # common support is 1.4%
mat <- cem(treatment = "treat", data = data, drop = "re78",keep.all=TRUE)
mat
est <- att(mat, re78 ~ treat + age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married, data = data)
est
est2 <- att(mat, re78 ~ treat + age + I(age^2) + education + I(education^2) + nodegree + black + hispanic + re74 + I(re74^2) + re75 + I(re75^2) + married, data = data, model = "forest")
est2
plot(est2, mat, data, vars=c("education", "age", "re74", "re75", "black", "hispanic", "nodegree", "married"))
age <- data_dw$age
treat <- data_dw$treat
black <- data_dw$black
hispanic <- data_dw$hispanic
education <- data_dw$education
married <- data_dw$married
nodegree <- data_dw$nodegree
re74 <- data_dw$re74
re78 <- data_dw$re78
re75 <- data_dw$re75
#mean(age[treat == 1])
#mean(age[treat == 0])
# calculating means by treatment status (control == 0, treatment == 1)
covars<- c('age', 'married', 'education', 'black', 'hispanic', 'nodegree', 're74', 're75')
data_dw %>%
group_by(treat) %>%
dplyr::select(one_of(covars)) %>%
summarise_all(funs(mean(., na.rm = T)))
# Testing for difference in means to check if the data is balanced or not.
lapply(data_dw[,c("married", "age", "black", "nodegree", "hispanic", "education", "re74", "re75")], function(x) t.test(x ~ data_dw$treat, var.equal = TRUE))
